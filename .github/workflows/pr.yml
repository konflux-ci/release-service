name: Go Test on Pull Requests
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
jobs:
  go:
    name: Check sources
    runs-on: ubuntu-latest
    env:
      OPERATOR_SDK_VERSION: v1.39.1
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Cache Operator SDK ${{ env.OPERATOR_SDK_VERSION }}
        uses: actions/cache@v4
        id: cache-operator-sdk
        with:
          path: ~/cache
          key: operator-sdk-${{ env.OPERATOR_SDK_VERSION }}
      - name: Download Operator SDK ${{ env.OPERATOR_SDK_VERSION }}
        if: steps.cache-operator-sdk.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/cache
          wget https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk_linux_amd64 -O ~/cache/operator-sdk-${OPERATOR_SDK_VERSION} > /dev/null -O ~/cache/operator-sdk-${OPERATOR_SDK_VERSION} > /dev/null
          chmod +x ~/cache/operator-sdk-${OPERATOR_SDK_VERSION}
      - name: Install Operator SDK ${{ env.OPERATOR_SDK_VERSION }}
        run: |
          mkdir -p ~/bin
          cp ~/cache/operator-sdk-${OPERATOR_SDK_VERSION} ~/bin/operator-sdk
          echo "$HOME/bin" >> $GITHUB_PATH
      - name: Regenerate executables with current environment packages
        run: |
          rm -f bin/kustomize bin/controller-gen
          make kustomize controller-gen
      - name: Cache go modules
        id: cache-mod
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download dependencies
        run: go mod download
        if: steps.cache-mod.outputs.cache-hit != 'true'
      - name: Check go mod status
        run: |
          go mod tidy
          if [[ ! -z $(git status ':(exclude)bin/kustomize' ':(exclude)bin/controller-gen' -s) ]]
          then
            echo "Go mod state is not clean:"
            git --no-pager diff ':(exclude)bin/kustomize' ':(exclude)bin/controller-gen'
            exit 1
          fi
      - name: Check format
        run: |
          make fmt
          if [[ ! -z $(git status ':(exclude)bin/kustomize' ':(exclude)bin/controller-gen' -s) ]]
          then
            echo "Some files are not properly formatted."
            echo "Please run `go fmt` and amend your commit."
            git --no-pager diff ':(exclude)bin/kustomize' ':(exclude)bin/controller-gen'
            exit 1
          fi
      - uses: dominikh/staticcheck-action@v1.4.0
        with:
          version: "2024.1.1"
          install-go: false
      - name: Check manifests
        run: |
          make generate manifests
          if [[ ! -z $(git status ':(exclude)bin/kustomize' ':(exclude)bin/controller-gen' -s) ]]
          then
            echo "generated sources are not up to date:"
            git --no-pager diff ':(exclude)bin/kustomize' ':(exclude)bin/controller-gen'
            exit 1
          fi
      - name: Check RBAC wildcards
        run: |
          if grep -n "*" config/rbac/*.yaml ; then
            echo "RBAC files contain wildcards (*)"
            exit 1
          fi
      - name: Run Go Tests
        run: make test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
      - name: Ensure make build succeeds
        run: make build
      - name: Ensure make bundle succeeds
        run: make bundle
  docker:
    name: Check docker build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if dockerimage build is working
        run: docker build -f ./Dockerfile .
  gitlint:
    name: Run gitlint checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install gitlint into container
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install gitlint
      - name: Run gitlint check
        run: |
          source venv/bin/activate
          gitlint --commits origin/${{ github.event.pull_request.base.ref }}..HEAD
