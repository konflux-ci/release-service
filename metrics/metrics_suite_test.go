/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package metrics

import (
	"fmt"
	"github.com/prometheus/client_golang/prometheus"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"
	"strings"
	"testing"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

func TestMetricsRelease(t *testing.T) {
	RegisterFailHandler(Fail)

	RunSpecs(t, "metrics Suite")
}

var _ = BeforeSuite(func() {
	logf.SetLogger(zap.New(zap.WriteTo(GinkgoWriter), zap.UseDevMode(true)))
})

// getMetricHeaderString returns the header that can be seen in Prometheus metrics using the parameters passed
// to the function.
func getMetricHeaderString(name, help, kind string) string {
	header := fmt.Sprintf("# HELP %s %s\n", name, help)
	header += fmt.Sprintf("# TYPE %s %s\n", name, kind)

	return header
}

// getMetricLabelsString returns the label string that can be seen in Prometheus metrics data. This function used the
// same name of each labels for their value to generate mock content.
func getMetricLabelsString(labels []string) string {
	var metricLabels string

	for _, label := range labels {
		metricLabels += fmt.Sprintf("%s=\"%s\",", label, label)
	}

	return metricLabels
}

// newCounterReader generates a strings.Reader to be used by Prometheus' testutils. The Reader will contain the
// expected counter metric data generated by using the parameters passed to this function.
func newCounterReader(opts prometheus.CounterOpts, labels []string) *strings.Reader {
	counterData := getMetricHeaderString(opts.Name, opts.Help, "counter")

	metricLabels := getMetricLabelsString(labels)
	counterData += fmt.Sprintf("%s{%s} %d\n", opts.Name, metricLabels, 1)

	return strings.NewReader(counterData)
}

// newHistogramReader generates a strings.Reader to be used by Prometheus' testutils. The Reader will contain the
// expected histogram metric data generated by using the parameters passed to this function.
func newHistogramReader(opts prometheus.HistogramOpts, labels []string, startTime, completionTime *metav1.Time) *strings.Reader {
	histogramData := getMetricHeaderString(opts.Name, opts.Help, "histogram")

	elapsedTime := completionTime.Sub(startTime.Time).Seconds()
	metricLabels := getMetricLabelsString(labels)

	for _, bucket := range opts.Buckets {
		var items int
		if bucket >= elapsedTime {
			items = 1
		}
		histogramData += fmt.Sprintf("%s_bucket{%sle=\"%g\"} %d\n", opts.Name, metricLabels, bucket, items)
	}

	histogramData += fmt.Sprintf("%s_sum{%s} %g\n\n", opts.Name, metricLabels, elapsedTime)
	histogramData += fmt.Sprintf("%s_count{%s} %d\n", opts.Name, metricLabels, 1)

	return strings.NewReader(histogramData)
}
